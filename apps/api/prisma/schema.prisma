generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id          String        @id @default(cuid())
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  String
  
  // Customer's delivery requirements
  pickupAddress    String
  deliveryAddress  String
  pickupDate       DateTime
  deliveryDate     DateTime?
  
  // Package information
  packages         Package[]
  
  // Customer preferences
  specialInstructions String?
  priority           OrderPriority @default(STANDARD)
  
  // Status tracking
  status            OrderStatus    @default(PENDING)
  
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  deliveries        Delivery[]     @relation("OrderDeliveries")
  payments          Payment[]
  estimates         Estimate[]
}

enum OrderPriority {
  LOW
  STANDARD
  HIGH
  URGENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Driver's delivery execution
model Delivery {
  id          String        @id @default(cuid())
  
  // Link to customer orders
  orders      Order[]       @relation("OrderDeliveries")
  
  // Driver assignment
  driver      Driver        @relation(fields: [driverId], references: [id])
  driverId    String
  
  // Route and timing
  route       Route         @relation(fields: [routeId], references: [id])
  routeId     String
  
  // Delivery execution
  estimatedPickupTime    DateTime?
  estimatedDeliveryTime  DateTime?
  actualPickupTime       DateTime?
  actualDeliveryTime     DateTime?
  
  // Status
  status      DeliveryStatus @default(ASSIGNED)
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum DeliveryStatus {
  ASSIGNED
  PICKUP_IN_PROGRESS
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  CANCELLED
}

// Driver/Vehicle operator
model Driver {
  id          String      @id @default(cuid())
  name        String
  email       String      @unique
  phone       String
  licenseNumber String?
  vehicleType VehicleType
  isAvailable Boolean     @default(true)
  
  // Relations
  deliveries  Delivery[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum VehicleType {
  CAR
  VAN
  TRUCK
  MOTORCYCLE
  BICYCLE
  ON_FOOT
}

model Customer {
  id      String          @id @default(cuid())
  name    String
  email   String          @unique
  phone   String?
  address String
  orders  Order[]
}

model Route {
  id        String         @id @default(cuid())
  pickup    Location       @relation("PickupLocation", fields: [pickupId], references: [id])
  pickupId  String
  dropoff   Location       @relation("DropoffLocation", fields: [dropoffId], references: [id])
  dropoffId String
  legs      RouteLeg[]
  carrier   Carrier?       @relation(fields: [carrierId], references: [id])
  carrierId String?
  deliveries Delivery[]
}

model RouteLeg {
  id                String        @id @default(cuid())
  route             Route         @relation(fields: [routeId], references: [id])
  routeId           String
  transportMode     TransportMode
  pickupPoint       Location      @relation("LegPickupLocation", fields: [pickupLocationId], references: [id])
  pickupLocationId  String
  dropoffPoint      Location      @relation("LegDropoffLocation", fields: [dropoffLocationId], references: [id])
  dropoffLocationId String
  startTime         DateTime?
  endTime           DateTime?
  carrier           Carrier?      @relation(fields: [carrierId], references: [id])
  carrierId         String?
  packages          Package[]
}

enum TransportMode {
  TRUCK
  AIRPLANE
  TRAIN
  BIKE
  ON_FOOT
}

model Package {
  id             String        @id @default(cuid())
  order          Order         @relation(fields: [orderId], references: [id])
  orderId        String
  segment        RouteLeg?     @relation(fields: [segmentId], references: [id])
  segmentId      String?
  weightKg       Float
  dimensions     String
  description    String
  fragile        Boolean       @default(false)
  perishable     Boolean       @default(false)
  insured        Boolean       @default(false)
  trackingNumber String        @unique
  status         PackageStatus @default(AWAITING_PICKUP)
}

enum PackageStatus {
  AWAITING_PICKUP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  LOST
}

model Location {
  id        String @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float

  // Relations
  pickupRoutes  Route[]    @relation("PickupLocation")
  dropoffRoutes Route[]    @relation("DropoffLocation")
  legPickups    RouteLeg[] @relation("LegPickupLocation")
  legDropoffs   RouteLeg[] @relation("LegDropoffLocation")
}

model Payment {
  id            String         @id @default(cuid())
  method        PaymentMethod
  amount        Float
  currency      String
  status        PaymentStatus  @default(PENDING)
  transactionId String?
  timestamp     DateTime       @default(now())
  order         Order?         @relation(fields: [orderId], references: [id])
  orderId       String?
}

enum PaymentMethod {
  CREDIT_CARD
  CASH
  BANK_TRANSFER
  MOBILE
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

model Estimate {
  id                    String         @id @default(cuid())
  estimatedCost         Float
  currency              String
  estimatedDeliveryTime DateTime
  order                 Order?         @relation(fields: [orderId], references: [id])
  orderId               String?
}

model Carrier {
  id          String      @id @default(cuid())
  name        String
  type        CarrierType
  contactInfo String?
  routes      Route[]
  segments    RouteLeg[]
}

enum CarrierType {
  COMPANY
  INDIVIDUAL
  DRONE
  ROBOT
}
